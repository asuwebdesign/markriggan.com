//==================================================================
// Functions and Mixins
// Organizes STAMP and custom Sass mixins for the project.
// (c) Atlantic BT. All Rights Reserved.
//==================================================================/


// Semantic Grid System
// =================================================================/

	// Default values
	// -------------------------------------------------------------/
	$column_width: 60;
	$gutter_width: 20;
	$columns: 12;


	// Grid System - Width
	// -------------------------------------------------------------/
	@function gridsystem-width($columns:$columns) {
	
		@return ($column_width * $columns) + ($gutter_width * $columns);
	
	}
	$total_width: 100%;

	
	// Clearfix
	// -------------------------------------------------------------/
	@mixin clearfix() { *zoom:1;
	
		&:before, &:after { content:""; display:table; }
		&:after { clear:both; }
	}


	// Grid System - Row
	// -------------------------------------------------------------/
	@mixin row-size($columns:$columns) {

		display: block;
		width: $total_width*(($gutter_width + gridsystem_width($columns))/gridsystem_width($columns));
		margin: 0 $total_width*((($gutter_width*.5)/gridsystem_width($columns))*-1);
		// *width: $total_width*(($gutter_width + gridsystem_width($columns))/gridsystem_width($columns))-$correction;
		// *margin: 0 $total_width*((($gutter_width*.5)/gridsystem_width($columns))*-1)-$correction;
		@include clearfix();
	
	}


	// Grid System - Column
	// -------------------------------------------------------------/
	@mixin column-size($x,$columns:$columns) {

		display: inline;
		float: left;
		width: $total_width*(((($gutter_width+$column_width)*$x)-$gutter_width) / gridsystem_width($columns));
		margin: 0 $total_width*(($gutter_width*.5)/gridsystem_width($columns));
		// *width: $total_width*(((($gutter_width+$column_width)*$x)-$gutter_width) / gridsystem_width($columns))-$correction;
		// *margin: 0 $total_width*(($gutter_width*.5)/gridsystem_width($columns))-$correction;

	}

	
	// Grid System - Push
	// -------------------------------------------------------------/
	@mixin push-size($offset:1) {

		margin-left: $total_width*((($gutter_width+$column_width)*$offset) / gridsystem_width($columns)) + $total_width*(($gutter_width*.5)/gridsystem_width($columns));

	}


	// Grid System - Pull
	// -------------------------------------------------------------/
	@mixin pull-size($offset:1) {

		margin-right: $total_width*((($gutter_width+$column_width)*$offset) / gridsystem_width($columns)) + $total_width*(($gutter_width*.5)/gridsystem_width($columns));

	}


// Convert Px to Rem
// =================================================================/

	// Global Convert
	// -------------------------------------------------------------/
	@mixin rem($property, $values) {
		
		// Create a couple of empty lists as output buffers.
		$font-size: $base_font_size;
		$px-values: ();
		$rem-values: ();
		
		// Loop through the $values list
		@each $value in $values {

			// For each property value, if it's in rem or px, derive both rem and
			// px values for it and add those to the end of the appropriate buffer.
			// Ensure all pixel values are rounded to the nearest pixel.
			@if $value == 0 or $value == 0px {

				// 0 -- use it without a unit
				$px-values: join($px-values, 0);
				$rem-values: join($rem-values, 0);
			
			} @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
			
				// px value given - calculate rem value from font-size
				$new-rem-value: $value / $font-size;
				$px-values: join($px-values, round($value));
				$rem-values: join($rem-values, #{$new-rem-value}rem);
			
			} @else if type-of($value) == number and not unitless($value) and (unit($value) == "%") {
			
				// % value given - don't add px or rem
				$px-values: join($px-values, #{$value});
				$rem-values: join($rem-values, #{$value});
			
			} @else if $value == auto {
			
				// auto - don't add px or rem
				$px-values: join($px-values, auto);
				$rem-values: join($rem-values, auto);
			
			} @else {
			
				// unitless value - use those directly as rem and calculate the px-fallback
				$px-values: join($px-values, round($value * $font-size));
				$rem-values: join($rem-values, #{$value}rem);

			}

		}
		
		// output the converted rules
		#{$property}: $px-values;
		#{$property}: $rem-values;
	
	}
	
	


// Inline Retina Display Media Query
// =================================================================/

	@mixin at2x($image, $width, $height) {
	
		@media (min--moz-device-pixel-ratio: 1.3), (-o-min-device-pixel-ratio: 2.6/2), (-webkit-min-device-pixel-ratio: 1.3), (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
			background-image: url($image);
			background-size: $width $height;
		}
	
	}